import os
from copy import deepcopy
from game.royal_game_of_ur import RoyalGameOfUr
from game.training_data import create_dataset_from_game_files


class Training:
    """
    An instance of an agent is trained using reinforcement
    learning. The agent uses a policy to make rollouts
    for each move, and a value function to truncate the
    rollouts by evaluating the position after a certain
    number of moves. The agent is trained using the
    following process:

    1) The agents are loaded (policy, value function)
    2) Self-play games are generated by the agent
    playing against itself and stored.
    3) The policy and value function are trained
    using the generated data. The policy must predict
    the action taken by each agent, and the value function
    must predict the expected value of the reward in a
    given state.
    4) Finally, the new policy and value function are saved.

    This process is repeated until the agent converges
    to a good policy and value function.
    """
    def __init__(self, agent_instance,
                 game_instance: RoyalGameOfUr,
                 games_dir):
        """
        Initialize the training process

        agent_instance: instance of the agent class
        game_instance: instance of the game class
        games_dir: directory to store the games played by the agent
        """
        assert hasattr(agent_instance, 'train_agent')
        # assert hasattr(agent_instance, 'save_models')  # todo join with training?
        assert hasattr(agent_instance, 'reset')

        self.agent_instance = agent_instance
        self.game = game_instance
        self.games_dir = games_dir

        if not os.path.exists(games_dir):
            os.mkdir(games_dir)

        # data
        self.X = None
        self.y_policy = None
        self.y_value = None

        self.agents = None

    def load_agents(self, verbose=False):
        """ Create and set agents """
        self.agents = (deepcopy(self.agent_instance),
                       deepcopy(self.agent_instance))
        for agent in self.agents:
            agent.reset(verbose=verbose)

    def play_game(self, verbose=False):
        """
        Play a game of the Royal Game of Ur. The agent plays
        against itself, and the game is recorded for training.
        The game is then saved to the database directory.
        """
        n = len(os.listdir(self.games_dir)) + 1
        game_copy = self.game.deepcopy()
        game_copy.play(self.agents, verbose=verbose)
        game_copy.save(path=f"{self.games_dir}\\game_{n}.pkl", verbose=verbose)

    def play_self_play_games(self, n_games, show_games=False, verbose=True):
        """ Play self-play games and save them to the database """
        for i in range(n_games):
            if verbose:
                print(f'\rPlaying game {i+1}/{n_games}', end=' ')
            self.play_game(verbose=show_games)
        print()

    def _get_game_files(self):
        """ Return a list of game files """
        return [f"{self.games_dir}\\{f}" for f in os.listdir(self.games_dir)]

    def convert_games_to_training_data(self, halflife=1):
        """
        Convert the games played by the agent to training data
        and store them in the instance variables X, y_policy, y_value
        """

        # choose files
        game_files = self._get_game_files()
        print(f'Converting {len(game_files)} games to training data...')

        # create dataset
        self.X, self.y_policy, self.y_value = create_dataset_from_game_files(game_files=game_files,
                                                                             halflife=halflife)

    def train_agent(self, **kwargs):
        """
        Train the policy and value function using
        the training data, then save the trained models.
        """
        self.agent_instance.train_agent(x=self.X,
                                        y_policy=self.y_policy,
                                        y_value=self.y_value,
                                        **kwargs)

    def evaluate_agent(self, n_evaluation_games):
        """Call the evaluate method of the agent if it exists"""
        if n_evaluation_games:
            if hasattr(self.agent_instance, 'evaluate'):
                print('\nEvaluating agent...')
                self.agent_instance.reset()
                self.agent_instance.evaluate(n_evaluation_games)

    def delete_games(self):
        """ Delete the games from the database """
        for f in os.listdir(self.games_dir):
            os.remove(f"{self.games_dir}\\{f}")

    def run(self, n_cycles, n_games_per_cycle,
            halflife=20, n_evaluation_games=0,
            show_games=False, verbose=True, **kwargs):
        """ Run the training loop
        - load two copies of the agent
        - play self-play games
        - convert the games to training data, save it to a directory
        - train the agent, save the new model in the same directory
        """
        for i in range(n_cycles):
            print(f'\n\nTraining cycle {i+1}/{n_cycles}\n')
            self.load_agents(verbose=verbose)
            self.play_self_play_games(n_games_per_cycle, show_games=show_games, verbose=verbose)
            self.convert_games_to_training_data(halflife=halflife)
            self.train_agent(**kwargs)
            self.delete_games()
            self.evaluate_agent(n_evaluation_games)
